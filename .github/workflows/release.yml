name: Create Release

on:
  push:
    tags:
      - '*.*.*'  # Trigger on version push

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF##refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release
        run: |
          curl --silent --show-error --location --request POST https://api.github.com/repos/${{ github.repository }}/releases \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --data @- <<EOF
          {
            "tag_name": "${{ steps.extract_tag.outputs.TAG_NAME }}",
            "name": "Release ${{ steps.extract_tag.outputs.TAG_NAME }}",
            "body": "Cloud Guardian Client Release ${{ steps.extract_tag.outputs.TAG_NAME }}",
            "draft": false,
            "prerelease": false
          }
          EOF
  
  build-and-release:
    name: Build and Release Binaries
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF##refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          VERSION=${{ steps.extract_tag.outputs.TAG_NAME }} make release

      - name: Upload binary as release asset
        run: |
          BINARY="cloud-guardian"
          VERSION=${{ steps.extract_tag.outputs.TAG_NAME }}
          RELEASE_ID=$(curl --silent --show-error --location \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION} | jq -r .id)

          for PACKAGE_SUFFIX in linux_amd64.tar.gz linux_arm64.tar.gz darwin_amd64.zip darwin_arm64.zip windows_amd64.zip windows_arm64.zip; \
          do \
            curl --silent --show-error --location \
              --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              --header "Content-Type: application/octet-stream" \
              --upload-file "dist/${BINARY}_${VERSION}_${PACKAGE_SUFFIX}" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets?name=${BINARY}_${VERSION}_${PACKAGE_SUFFIX}";
          done


